"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class PingMessage_t(object):
    __slots__ = ["ping_PID", "counter", "payload", "ping_time"]

    def __init__(self):
        self.ping_PID = 0
        self.counter = 0
        self.payload = ""
        self.ping_time = ""

    def encode(self):
        buf = BytesIO()
        buf.write(PingMessage_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iq", self.ping_PID, self.counter))
        __payload_encoded = self.payload.encode('utf-8')
        buf.write(struct.pack('>I', len(__payload_encoded)+1))
        buf.write(__payload_encoded)
        buf.write(b"\0")
        __ping_time_encoded = self.ping_time.encode('utf-8')
        buf.write(struct.pack('>I', len(__ping_time_encoded)+1))
        buf.write(__ping_time_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != PingMessage_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return PingMessage_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = PingMessage_t()
        self.ping_PID, self.counter = struct.unpack(">iq", buf.read(12))
        __payload_len = struct.unpack('>I', buf.read(4))[0]
        self.payload = buf.read(__payload_len)[:-1].decode('utf-8', 'replace')
        __ping_time_len = struct.unpack('>I', buf.read(4))[0]
        self.ping_time = buf.read(__ping_time_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if PingMessage_t in parents: return 0
        tmphash = (0x64b2b33cab91d57) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if PingMessage_t._packed_fingerprint is None:
            PingMessage_t._packed_fingerprint = struct.pack(">Q", PingMessage_t._get_hash_recursive([]))
        return PingMessage_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

