#!/usr/bin/python
"""

.. sectionauthor:: Asher Bender <a.bender.dev@gmail.com>
.. codeauthor:: Asher Bender <a.bender.dev@gmail.com>

"""

import os
import time
import pickle
import datetime
import argparse
import textwrap
from collections import OrderedDict


if __name__ == '__main__':

    # -------------------------------------------------------------------------
    #         Configure command-line options & parsing behaviour
    # -------------------------------------------------------------------------

    man = """Log network traffic."""
    formatter_class = argparse.RawDescriptionHelpFormatter
    parser = argparse.ArgumentParser(formatter_class=formatter_class,
                                     description=textwrap.dedent(man))

    msg = 'Path to log data.'
    parser.add_argument('fname', help=msg)

    msg = 'Time to log network traffic in seconds.'
    parser.add_argument('--time', type=float, help=msg, default=None)

    choices = ['lcm', 'mcl', 'rabbitmq']
    msg = "Underlying transport to use during test. Choose from '%r'."
    parser.add_argument('--transport', choices=choices, default='mcl')

    # Get arguments from the command-line.
    args = parser.parse_args()

    # Load transport method.
    if args.transport == 'lcm':
        from common.lcm import LogPingPong
    elif args.transport == 'mcl':
        from common.mcl import LogPingPong
    elif args.transport == 'rabbitmq':
        from common.rabbitmq import LogPingPong

    # -------------------------------------------------------------------------
    #                          Log Network Messages
    # -------------------------------------------------------------------------

    # Start logging network messages.
    print 'Logging messages'
    start_time = datetime.datetime.utcnow()
    logger = LogPingPong()
    while True:
        try:
            time.sleep(0.05)

        except KeyboardInterrupt:
            break

        # Stop logging if logging has been timed.
        if (args.time is not None):
            elapsed_time = datetime.datetime.utcnow() - start_time
            if elapsed_time.total_seconds() > args.time:
                break

    logger.close()
    print 'Stopped logging messages'

    # The payload is replicated across all messages. Duplicating the payload
    # does not aid analysis. To save significant space, the payload is removed
    # from the messages.
    data = OrderedDict()
    data['payload'] = logger.pings[0]['payload']
    data['pings'] = list()
    data['pongs'] = list()

    # Remove ping payloads.
    for ping in logger.pings:
        del(ping['payload'])
        data['pings'].append(ping)

    # Remove pong payloads.
    for pong in logger.pongs:
        del(pong['payload'])
        data['pongs'].append(pong)

    # Write data to file.
    with open(args.fname, 'w') as f:
        pickle.dump(data, f, protocol=2)
